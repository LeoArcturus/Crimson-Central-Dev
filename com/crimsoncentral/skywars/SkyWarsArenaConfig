package com.crimsoncentral.skywars.SkyWarsArenaConfig;

public class SkyWarsArenaConfig
{
    public File arenaData;
    public FileConfiguration arenaConfiguration;
    
    public SkyWarsArenaConfig(String tag)
    {
        arenaData = new File("plugins/CrimsonCentralv1/SkyWars/MapData/ArenaTags.yml");
        arenaConfiguration = YamlConfiguration.loadConfiguration(arenaData);
    }
    
    public void createDefaults(World w, int id, String tag, ArrayList<Location> podLocations, ArrayList<Location> chestLocations)
    {
        arenaConfiguration.set("World Tag", tag);
        arenaConfiguration.set("Item Tag", 0);
        arenaConfiguration.set("Item Tag 2", 0);
        arenaConfiguration.set("World Name", w);
        arenaConfiguration.set("World Time", 0);
        arenaConfiguration.set("World Weather", false);
        arenaConfiguration.set("Spawn Location 1", null);
        arenaConfiguration.set("Spawn Location 2", null);
        arenaConfiguration.set("Spawn Location 3", null);
        arenaConfiguration.set("Spawn Location 4", null);
        arenaConfiguration.set("Spawn Location 5", null);
        arenaConfiguration.set("Spawn Location 6", null);
        arenaConfiguration.set("Spawn Location 7", null);
        arenaConfiguration.set("Spawn Location 8", null);
        arenaConfiguration.set("Spawn Location 9", null);
        arenaConfiguration.set("Spawn Location 10", null);
        arenaConfiguration.set("Spawn Location 11", null);
        arenaConfiguration.set("Spawn Location 12", null);
        int x = 0;
        for(Location l : podLocations)
        {
            ++x;
            arenaConfiguration.set("Pod Location " + x, null);
        }
        int y = 0;
        for(Location l : chestLocations)
        {
            ++y;
            arenaConfiguration.set("Pod Location " + y, null);
        }
    }
    
    public void arenaConfig()
    {
	try{
	    arenaData.createNewFile();
	}catch(IOException e){
	    e.printStackTrace();
	}
    }
    
    public World getWorld()
    {
        String s = arenaConfiguration.getString("World Name");
        return Bukkit.getWorld(s);
    }
    
    public String getTag()
    {
        return arenaConfiguration.getString("World Tag");
    }
    
    public int getItemID()
    {
        return arenaConfiguration.getInt("Item Tag");
    }
    
    public int getAlternateItemID()
    {
        return arenaConfiguration.getInt("Item Tag 2");
    }
    
    public int getTime()
    {
        return arenaConfiguration.getInt("World Time");
    }
    
    public boolean getWeather()
    {
        return arenaConfiguration.getInt("World Weather");
    }
    
    public List<Location> getSpawns()
    {
        ArrayList<String> keys = new ArrayList<String>();
	ArrayList<Location> locs = new ArrayList<Location>();
    	for(String s : arenaConfiguration.getKeys(true))
	{
	    if(s.startsWith("Spawn"))
	    {
	    	keys.add(arenaConfiguration.getString(s));
	    }
	}
	for(String s : keys)
	{
	    Location loc;
	    StringTokenizer st = new StringTokenizer(s);
	    loc.setX(st.nextToken());
	    loc.setY(st.nextToken());
	    loc.setZ(st.nextToken());
	    loc.setYaw(st.nextToken());
	    loc.setPitch(st.nextToken());
	    loc.add(locs);
	}
        return this.locs;
    }
    
    public List<Location> getPodLocations()
    {
        ArrayList<String> keys = new ArrayList<String>();
	ArrayList<Location> locs = new ArrayList<Location>();
    	for(String s : arenaConfiguration.getKeys(true))
	{
	    if(s.startsWith("Pod"))
	    {
	    	keys.add(arenaConfiguration.getString(s));
	    }
	}
	for(String s : keys)
	{
	    Location loc;
	    StringTokenizer st = new StringTokenizer(s);
	    loc.setX(st.nextToken());
	    loc.setY(st.nextToken());
	    loc.setZ(st.nextToken());
	    loc.add(locs);
	}
        return this.locs;
    }
    
    public List<Location> playerChestLocations()
    {
        ArrayList<String> keys = new ArrayList<String>();
	ArrayList<Location> locs = new ArrayList<Location>();
    	for(String s : arenaConfiguration.getKeys(true))
	{
	    if(s.startsWith("Player"))
	    {
	    	keys.add(arenaConfiguration.getString(s));
	    }
	}
	for(String s : keys)
	{
	    Location loc;
	    StringTokenizer st = new StringTokenizer(s);
	    loc.setX(st.nextToken());
	    loc.setY(st.nextToken());
	    loc.setZ(st.nextToken());
	    loc.add(locs);
	}
        return this.locs;
    }
    
    public List<Location> midChestLocations()
    {
        ArrayList<String> keys = new ArrayList<String>();
	ArrayList<Location> locs = new ArrayList<Location>();
    	for(String s : arenaConfiguration.getKeys(true))
	{
	    if(s.startsWith("Middle"))
	    {
	    	keys.add(arenaConfiguration.getString(s));
	    }
	}
	for(String s : keys)
	{
	    Location loc;
	    StringTokenizer st = new StringTokenizer(s);
	    loc.setX(st.nextToken());
	    loc.setY(st.nextToken());
	    loc.setZ(st.nextToken());
	    loc.add(locs);
	}
        return this.locs;
    }
    
    public List<Location> centerChestLocations()
    {
        ArrayList<String> keys = new ArrayList<String>();
	ArrayList<Location> locs = new ArrayList<Location>();
    	for(String s : arenaConfiguration.getKeys(true))
	{
	    if(s.startsWith("Center"))
	    {
	    	keys.add(arenaConfiguration.getString(s));
	    }
	}
	for(String s : keys)
	{
	    Location loc;
	    StringTokenizer st = new StringTokenizer(s);
	    loc.setX(st.nextToken());
	    loc.setY(st.nextToken());
	    loc.setZ(st.nextToken());
	    loc.add(locs);
	}
        return this.locs;
    }
    
    public List<PLayer> getPlayers()
    {
        return this.players;
    }
    
    public int getGameStage()
    {
        return this.gameStage;
    }
}
